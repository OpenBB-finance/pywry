name: Pip

on: workflow_dispatch

jobs:
  build-nightly-only:
    name: Build nightly only
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [
          { version: '3.8', abi: 'cp38-cp38' },
          { version: '3.9', abi: 'cp39-cp39' },
          { version: '3.10', abi: 'cp310-cp310' },
          { version: '3.11', abi: 'cp311-cp311'}
        ]

    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
      options: --user root

    steps:
      - uses: actions/checkout@v1

      # Insert steps here to install you other dependencies.
      # Note that you're running inside of AlmaLinux 8, not ubuntu
      - name: Setup necessary packages
        run: |
          dnf update -y
          dnf install -y \
              gtk3-devel \
              webkit2gtk3-devel \
              openssl-devel \
              curl \
              wget \
              squashfs-tools \
              make \
              file

      - name: Setup dev tools
        run: |
          yum groupinstall -y "Development Tools"

      - run: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly-2022-07-26 --profile minimal -y
      - run: source $HOME/.cargo/env && rustup component add rust-src --toolchain nightly-2022-07-26-x86_64-unknown-linux-gnu
      - uses: actions/checkout@v2

      # We remove the Cargo.toml and Cargo.lock files and replace them with
      # Cargo-linux.toml and Cargo-linux.lock files, which are configured to build for linux.
      - name: Build
        run: |
          source $HOME/.cargo/env
          rm Cargo.toml && rm Cargo.lock
          mv Cargo-linux.toml Cargo.toml && mv Cargo-linux.lock Cargo.lock
          for PYBIN in /opt/python/${{ matrix.python.abi }}/bin; do
            "${PYBIN}/pip" install --user --upgrade pip wheel auditwheel setuptools-rust
            "${PYBIN}/python" setup.py bdist_wheel -p manylinux_2_28_x86_64 clean
          done

      # Try to install and test importing the package
      - name: Test Build
        run: |
          source $HOME/.cargo/env
          for PYBIN in /opt/python/${{ matrix.python.abi }}/bin; do
            "${PYBIN}/pip" install --force-reinstall dist/pywry-*.whl
            "${PYBIN}/python" -c 'import pywry; pywry.Pywry(); import platform; print(platform.python_version());'
          done

      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist/*.whl

  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release -o dist --find-interpreter
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release -o dist --universal2 --find-interpreter
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   needs: [macos, windows, build-nightly-only]
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: wheels
  #     - name: Publish to PyPI
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       with:
  #         command: upload
  #         args: --skip-existing *
