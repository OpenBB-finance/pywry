name: Pip

on: workflow_dispatch

jobs:
  build-nightly-only:
    name: Build nightly only
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["cp39-cp39", "cp310-cp310", "cp311-cp311"]
        target: [x86_64]
        processor: [x86_64]

    container:
      image: quay.io/pypa/manylinux_2_28_${{ matrix.processor }}
      options: --user root

    steps:
      - uses: actions/checkout@v1
      - name: Install nightly rust
        run: curl --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain nightly

      # Insert steps here to install you other dependencies.
      # Note that you're running inside of AlmaLinux 8, not ubuntu
      - name: Setup sudo apt installs for ubuntu-latest
        run: |
          yum update -y
          yum install -y \
              gtk3-devel \
              glib2-devel \
              webkitgtk4-devel \
              webkit2gtk3-devel \
              libsoup-devel \
              openssl-devel \
              curl \
              wget \
              squashfs-tools \
              gcc \
              gcc-c++ \
              make \
              file \
              librsvg2-devel

      - name: Setup dev tools
        run: |
          yum groupinstall -y "Development Tools"

      # We remove the Cargo.toml and Cargo.lock files and replace them with
      # Cargo-linux.toml and Cargo-linux.lock files, which are configured to build for linux.
      - name: Build
        run: |
          source $HOME/.cargo/env
          rm Cargo.toml && rm Cargo.lock
          mv Cargo-linux.toml Cargo.toml && mv Cargo-linux.lock Cargo.lock
          for PYBIN in /opt/python/${{ matrix.python-version }}/bin; do
            "${PYBIN}/pip" install maturin
            "${PYBIN}/pip" install .[dev]
            "${PYBIN}/maturin" build -m Cargo.toml -o dist -i "${PYBIN}/python" --release --sdist
          done

      # Try to install and test importing the package
      - name: Test Build
        if: matrix.target == 'x86_64'
        run: |
          source $HOME/.cargo/env
          for PYBIN in /opt/python/${{ matrix.python-version }}/bin; do
            "${PYBIN}/pip" install --force-reinstall dist/pywry-*.tar.gz
            "${PYBIN}/python" -c 'import pywry; import platform; print(platform.python_version());'
          done

      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist/pywry-*.tar.gz

  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release -o dist --find-interpreter
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release -o dist --universal2 --find-interpreter
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [macos, windows, build-nightly-only]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
